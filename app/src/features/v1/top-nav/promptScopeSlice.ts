import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk, store } from '../../../app/store';
import { gqlClient } from '../../../app/api';
import { gql } from '@apollo/client';

export interface Prompt {
    tag: string;
    id: string;
    title: string;
    selected: boolean;
}

export interface PartialScopeState {
    code: string;
    id: string;
    text: string;
    selected: boolean;
    prompts: Prompt[];
}

export interface TabState {
    tabs: PartialScopeState[];
    selectedTab: PartialScopeState | undefined;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: TabState = {
    tabs: [],
    status: 'idle',
    selectedTab: undefined,
};

export const fetchScopesAsync = createAsyncThunk(
    'scope/fetch',
    async () => {
        const query = gql`query listScopes($locale: I18NLocaleCode) {
            partialScopes(locale: $locale) {
              data {
                id
                attributes {
                  name
                  title
                }
              }
            }
          }`;
        const response = await gqlClient.query<PartialScopeState[]>({ query: query, variables: { 'locale': store.getState().locale.language } });
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const scopeTabSlice = createSlice({
    name: 'scope-tab',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        fetchTabs: (state) => {

        },
        switchTab: (state, action: PayloadAction<{ id: string, checked: boolean }>) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchScopesAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchScopesAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.tabs = action.payload;
            })
            .addCase(fetchScopesAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const { switchTab } = scopeTabSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const scopeNavs = (state: RootState) => state.scope.tabs;
export const selectedScope = (state: RootState) => state.scope.selectedTab;
export default scopeTabSlice.reducer;
